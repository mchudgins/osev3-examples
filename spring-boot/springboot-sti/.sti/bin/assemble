#!/bin/bash -e
#
# S2I assemble script for the 'springboot-sti' image.
# The 'assemble' script builds your application source ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

if [ "$1" = "-h" ]; then
	# If the 'springboot-sti' assemble script is executed with '-h' flag,
	# print the usage.
	exec /usr/local/sti/usage
fi

# # Restore artifacts from the previous build (if they exist).
# #
# if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
#   echo "---> Restoring build artifacts"
#   mv /tmp/artifacts/. ./
# fi
#
# echo "---> Installing application source"
# cp -Rf /tmp/src/. ./
#
# echo "---> Building application from source"
# # TODO: Add build steps for your application, eg npm install, bundle install

##############################################################################

# get the start time
START=`date --iso-8601=seconds`
ts=$(date +%s%N)

# Source code provided to STI is at ${HOME}/source
export HOME=/opt/app-root
LOCAL_SOURCE_DIR=${HOME}/src
mkdir -p $LOCAL_SOURCE_DIR

DEPLOY_DIR=/opt/openshift

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
ARTIFACT_DIR=${ARTIFACT_DIR-target}

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all JAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/*.jar $DEPLOY_DIR 2> /dev/null
  fi
}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  echo "Building with maven. $LOCAL_SOURCE_DIR/pom.xml found."
  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$BUILDER_ARGS" ]; then
    export BUILDER_ARGS="package -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga -B -s /opt/app-root/.m2/settings.xml"
#    export BUILDER_ARGS="package -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga -B"
  fi

  echo "Found pom.xml... attempting to build with 'mvn -e ${BUILDER_ARGS}'"

  echo "Maven version:"
  mvn --version

  # Execute the actual build
  mvn -e $BUILDER_ARGS

  ERR=$?

	# tell artifactory about the build

	# total time, in millis
	if [[ -n "${ARTIFACTORY}" ]]; then
echo "build complete.  building data set"
		tt=$((($(date +%s%N) - $ts)/1000000))

		# maven data
		maven=`mvn --version`
		mvn_version=`mvn --version | head -1 | sed 's/Apache Maven //'`
		mvn_home=`mvn --version | sed -n '2p' | sed 's/Maven home: //'`
		java_version=`mvn --version | sed -n '3p' | sed 's/Java version: //' | sed 's/, vendor: .*//'`
		java_vendor=`mvn --version | sed -n '3p' | sed 's/.*, vendor: //'`

		# platform data
		linux_kernel=`uname -r`
		linux_release=`uname -v`
		linux_platform=`uname -i`

		# pom data
		artifact=`xml_grep --root /project/artifactId --text pom.xml`
		group=`xml_grep --root /project/groupID --text pom.xml`
		version=`xml_grep --root /project/version --text pom.xml`
		package=`xml_grep --root /project/packaging --text pom.xml`
		target="${artifact}-${version}.${package}"
echo "checking for file ${target}"
		if [[ -f target/${target} ]]; then
			md5=`md5sum -b target/${target} | sed 's/ \*.*//'`
			size=`stat -c %s target/${target}`
		else
			md5="0"
			size=0
		fi
echo "file has md5 ${md5} and size ${size}"

		# openshift build data
		buildarray=(${OPENSHIFT_BUILD_NAME//-/ })
		buildnum=${buildarray[${#buildarray[@]}-1]}
		buildname=${OPENSHIFT_BUILD_NAME%%-[0-9]*}

		buildstatus="SUCCESS"
		if [[ $ERR -ne 0 ]]; then
			buildstatus="FAIL"
		fi

echo buildstatus ${buildstatus}
		# build the json file describing the build and send it to curl
		CURL_OPTS='-s -X PUT -H "Content-Type: application/json"'
		(
		cat <<_EOF_
		{
			"version" : "${BUILDER_VERSION}",
			"name"		: "${OPENSHIFT_BUILD_NAMESPACE}-${buildname}",
			"number"	: "${buildnum}",
			"artifact": {
				"name"		: "${group}::${target}",
				"md5sum"	: "${md5}",
				"size"		: ${size}
			},
			"args"		: "${BUILDER_ARGS}",
			"status"	: "${buildstatus}",
			"type"		: "MAVEN",
			"buildAgent" : {
				"name"		: "Maven",
				"version"	: "${mvn_version}",
				"java" 		: {
					"version" : "${java_version}",
					"vendor"	: "${java_vendor}"
				},
				"os"			: {
					"kernel"	: "${linux_kernel}",
					"release"	: "${linux_release}",
					"platform": "${linux_platform}"
				}
			},
			"agent"	: {
				"name"		: "springboot-sti"
			},
			"started"		: "${START}",
			"durationMillis" : ${tt},
			"url"				: "https://s3.amazonaws.com/dstcorp/builds/${OPENSHIFT_BUILD_NAMESPACE}/${buildname}/${buildnum}",
			"git" : {
				"commit" : "${OPENSHIFT_BUILD_COMMIT}",
				"repo"	: "${OPENSHIFT_BUILD_SOURCE}",
				"ref"		: "${OPENSHIFT_BUILD_REFERENCE}"
			}
		}
_EOF_
	) > /tmp/build.json
		curl ${CURL_OPTS} --data @/tmp/build.json ${ARTIFACTORY}/api/build
echo curl ${CURL_OPTS} --data - ${ARTIFACTORY}/api/buid
echo "done curling. exit $?"
	fi

  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory
  # to the $DEPLOY_DIR directory for later deployment
  copy_artifacts target

	# clean up after maven
  mvn clean
  if [ -d "$HOME/.m2/repository" ]; then
    rm -r "$HOME/.m2/repository"
  fi

  popd &> /dev/null


else
   echo "Unable to find the project pom.xml. Exiting with an error."
	 exit 1
fi

# Copy (probably binary) artifacts from the deployments/
# directory to the $DEPLOY_DIR directory for later deployment
# copy_artifacts "deployments"

# if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
#   echo "Copying config files from project..."
#   cp -v $LOCAL_SOURCE_DIR/configuration/* $ARTIFACTS_HOME
# fi

# As SpringBoot you should only have 1 fat jar
if [ $(ls /opt/openshift/*.jar | wc -l) -eq 1 ]; then
  mv /opt/openshift/*.jar /opt/openshift/app.jar
  [ ! -f /opt/openshift/app.jar ] && echo "Application could not be properly built." && exit 1
  echo "Application jar file is located in /opt/openshift/app.jar"
else
  echo "Whoa.  More than one jar file found!  This builder assumes you have a single (fat) jar."
  echo "Found the following jars:  " `ls /opt/openshift/*.jar`
  exit 1
fi
